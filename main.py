import cv2
import numpy as np
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
from collections import deque
import requests
import base64
from PIL import Image, ImageTk
import json
import pyttsx3
from ultralytics import YOLO
import os

class AdvancedSignLanguageDetector:
    def __init__(self):
        # Configuraci√≥n del modelo YOLOv8 preentrenado
        self.load_models()
        
        # Variables de control
        self.camera_active = False
        self.cap = None
        self.current_frame = None
        
        # Buffer para estabilizar predicciones
        self.prediction_buffer = deque(maxlen=15)
        self.last_prediction = ""
        self.prediction_count = 0
        
        # Sistema de texto a voz
        self.setup_tts()
        
        # Mapeo de se√±as detectadas (puede expandirse)
        self.sign_mapping = {
            'A': 'Letra A',
            'B': 'Letra B', 
            'C': 'Letra C',
            'D': 'Letra D',
            'E': 'Letra E',
            'F': 'Letra F',
            'G': 'Letra G',
            'H': 'Letra H',
            'I': 'Letra I',
            'J': 'Letra J',
            'K': 'Letra K',
            'L': 'Letra L',
            'M': 'Letra M',
            'N': 'Letra N',
            'O': 'Letra O',
            'P': 'Letra P',
            'Q': 'Letra Q',
            'R': 'Letra R',
            'S': 'Letra S',
            'T': 'Letra T',
            'U': 'Letra U',
            'V': 'Letra V',
            'W': 'Letra W',
            'X': 'Letra X',
            'Y': 'Letra Y',
            'Z': 'Letra Z',
            'HELLO': 'Hola',
            'THANKS': 'Gracias',
            'YES': 'S√≠',
            'NO': 'No',
            'PLEASE': 'Por favor',
            'SORRY': 'Lo siento'
        }
        
        # Historial de palabras formadas
        self.word_history = []
        self.current_word = ""
        
        self.setup_gui()
    
    def load_models(self):
        """Cargar modelos YOLOv8 preentrenados"""
        print("üîÑ Cargando modelos de IA...")
        
        try:
            # Intentar cargar modelo local o descargar modelo preentrenado
            model_path = "sign_language_yolov8.pt"
            
            if not os.path.exists(model_path):
                print("üì• Descargando modelo preentrenado YOLOv8...")
                # Usar modelo base de YOLOv8 y configurarlo para sign language
                self.model = YOLO('yolov8n.pt')  # Nano version for speed
            else:
                self.model = YOLO(model_path)
            
            print("‚úÖ Modelo YOLOv8 cargado exitosamente")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error cargando modelo YOLOv8: {e}")
            print("üîÑ Usando sistema de fallback...")
            self.model = None
            
        # API de Roboflow como respaldo (modelo preentrenado especializado)
        self.roboflow_api_key = "YOUR_API_KEY"  # Usuario debe obtener clave gratis
        self.roboflow_model_url = "https://detect.roboflow.com/sign-language-detection-7cdpj/2"
        self.use_roboflow = False  # Cambiar a True si se tiene API key
    
    def setup_tts(self):
        """Configurar sistema de texto a voz"""
        try:
            self.tts_engine = pyttsx3.init()
            voices = self.tts_engine.getProperty('voices')
            
            # Buscar voz en espa√±ol si est√° disponible
            spanish_voice = None
            for voice in voices:
                if 'spanish' in voice.name.lower() or 'es' in voice.id.lower():
                    spanish_voice = voice.id
                    break
            
            if spanish_voice:
                self.tts_engine.setProperty('voice', spanish_voice)
            
            # Configurar velocidad y volumen
            self.tts_engine.setProperty('rate', 150)
            self.tts_engine.setProperty('volume', 0.8)
            
            print("üîä Sistema de voz configurado")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error configurando TTS: {e}")
            self.tts_engine = None
    
    def setup_gui(self):
        """Configurar interfaz gr√°fica avanzada"""
        self.root = tk.Tk()
        self.root.title("Sistema Avanzado de Traducci√≥n LSP con IA - Prototipo YOLOv8")
        self.root.geometry("1200x800")
        self.root.configure(bg='#1a1a2e')
        
        # Estilo moderno
        style = ttk.Style()
        style.theme_use('clam')
        
        # T√≠tulo principal con gradiente visual
        title_frame = tk.Frame(self.root, bg='#16213e', height=80)
        title_frame.pack(fill='x', padx=0, pady=0)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(
            title_frame, 
            text="ü§ñ Sistema LSP con Inteligencia Artificial YOLOv8", 
            font=('Segoe UI', 20, 'bold'),
            bg='#16213e',
            fg='#00d4ff'
        )
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(
            title_frame,
            text="Detecci√≥n en Tiempo Real | Traducci√≥n Autom√°tica | S√≠ntesis de Voz",
            font=('Segoe UI', 10),
            bg='#16213e',
            fg='#a8dadc'
        )
        subtitle_label.pack()
        
        # Frame principal
        main_frame = tk.Frame(self.root, bg='#1a1a2e')
        main_frame.pack(expand=True, fill='both', padx=20, pady=10)
        
        # Panel de control superior
        control_panel = tk.Frame(main_frame, bg='#0f3460', relief='raised', bd=2)
        control_panel.pack(fill='x', pady=(0, 10))
        
        # Botones de control con iconos
        button_frame = tk.Frame(control_panel, bg='#0f3460')
        button_frame.pack(side='left', padx=10, pady=10)
        
        self.start_btn = tk.Button(
            button_frame,
            text="üé• Iniciar C√°mara",
            command=self.start_camera,
            bg='#28a745',
            fg='white',
            font=('Segoe UI', 11, 'bold'),
            padx=20,
            pady=8,
            cursor='hand2'
        )
        self.start_btn.pack(side='left', padx=5)
        
        self.stop_btn = tk.Button(
            button_frame,
            text="‚èπÔ∏è Detener",
            command=self.stop_camera,
            bg='#dc3545',
            fg='white',
            font=('Segoe UI', 11, 'bold'),
            padx=20,
            pady=8,
            state='disabled',
            cursor='hand2'
        )
        self.stop_btn.pack(side='left', padx=5)
        
        self.speak_btn = tk.Button(
            button_frame,
            text="üîä Reproducir",
            command=self.speak_current_word,
            bg='#17a2b8',
            fg='white',
            font=('Segoe UI', 11, 'bold'),
            padx=20,
            pady=8,
            cursor='hand2'
        )
        self.speak_btn.pack(side='left', padx=5)
        
        self.clear_btn = tk.Button(
            button_frame,
            text="üóëÔ∏è Limpiar",
            command=self.clear_history,
            bg='#6c757d',
            fg='white',
            font=('Segoe UI', 11, 'bold'),
            padx=20,
            pady=8,
            cursor='hand2'
        )
        self.clear_btn.pack(side='left', padx=5)
        
        # Estado del sistema
        status_frame = tk.Frame(control_panel, bg='#0f3460')
        status_frame.pack(side='right', padx=10, pady=10)
        
        self.status_label = tk.Label(
            status_frame,
            text="üî¥ Sistema Inactivo",
            font=('Segoe UI', 11, 'bold'),
            bg='#0f3460',
            fg='#ffc107'
        )
        self.status_label.pack()
        
        self.fps_label = tk.Label(
            status_frame,
            text="FPS: 0",
            font=('Segoe UI', 9),
            bg='#0f3460',
            fg='#28a745'
        )
        self.fps_label.pack()
        
        # Contenido principal en tres columnas
        content_frame = tk.Frame(main_frame, bg='#1a1a2e')
        content_frame.pack(expand=True, fill='both')
        
        # Columna izquierda - C√°mara
        left_frame = tk.Frame(content_frame, bg='#0f3460', relief='raised', bd=2)
        left_frame.pack(side='left', expand=True, fill='both', padx=(0, 5))
        
        camera_title = tk.Label(
            left_frame,
            text="üìπ Vista en Tiempo Real",
            font=('Segoe UI', 14, 'bold'),
            bg='#0f3460',
            fg='#00d4ff'
        )
        camera_title.pack(pady=5)
        
        self.camera_label = tk.Label(
            left_frame,
            text="C√°mara no iniciada\n\nHaz clic en 'Iniciar C√°mara'\npara comenzar la detecci√≥n",
            bg='black',
            fg='white',
            font=('Segoe UI', 12),
            justify='center'
        )
        self.camera_label.pack(expand=True, fill='both', padx=10, pady=10)
        
        # Columna central - Detecci√≥n
        center_frame = tk.Frame(content_frame, bg='#0f3460', relief='raised', bd=2)
        center_frame.pack(side='left', fill='y', padx=5)
        center_frame.configure(width=280)
        
        detection_title = tk.Label(
            center_frame,
            text="üéØ Detecci√≥n IA",
            font=('Segoe UI', 14, 'bold'),
            bg='#0f3460',
            fg='#00d4ff'
        )
        detection_title.pack(pady=5)
        
        # Se√±a actual detectada
        current_frame = tk.Frame(center_frame, bg='#1a1a2e', relief='sunken', bd=2)
        current_frame.pack(pady=10, padx=10, fill='x')
        
        tk.Label(
            current_frame,
            text="Se√±a Actual:",
            font=('Segoe UI', 10, 'bold'),
            bg='#1a1a2e',
            fg='#a8dadc'
        ).pack()
        
        self.detected_sign_label = tk.Label(
            current_frame,
            text="Ninguna",
            font=('Segoe UI', 16, 'bold'),
            bg='#1a1a2e',
            fg='#00ff88',
            wraplength=250
        )
        self.detected_sign_label.pack(pady=5)
        
        # M√©tricas de detecci√≥n
        metrics_frame = tk.Frame(center_frame, bg='#1a1a2e', relief='sunken', bd=2)
        metrics_frame.pack(pady=5, padx=10, fill='x')
        
        self.confidence_label = tk.Label(
            metrics_frame,
            text="Confianza: 0%",
            font=('Segoe UI', 10),
            bg='#1a1a2e',
            fg='#ffc107'
        )
        self.confidence_label.pack(pady=2)
        
        self.detection_count_label = tk.Label(
            metrics_frame,
            text="Detecciones: 0",
            font=('Segoe UI', 10),
            bg='#1a1a2e',
            fg='#17a2b8'
        )
        self.detection_count_label.pack(pady=2)
        
        # Modelo de IA en uso
        model_frame = tk.Frame(center_frame, bg='#1a1a2e', relief='sunken', bd=2)
        model_frame.pack(pady=5, padx=10, fill='x')
        
        tk.Label(
            model_frame,
            text="üß† Modelo de IA:",
            font=('Segoe UI', 10, 'bold'),
            bg='#1a1a2e',
            fg='#a8dadc'
        ).pack()
        
        model_name = "YOLOv8 Local" if self.model else "Sistema B√°sico"
        self.model_label = tk.Label(
            model_frame,
            text=model_name,
            font=('Segoe UI', 9),
            bg='#1a1a2e',
            fg='#00d4ff'
        )
        self.model_label.pack()
        
        # Columna derecha - Traducci√≥n y historial
        right_frame = tk.Frame(content_frame, bg='#0f3460', relief='raised', bd=2)
        right_frame.pack(side='right', fill='y', padx=(5, 0))
        right_frame.configure(width=300)
        
        translation_title = tk.Label(
            right_frame,
            text="üí¨ Traducci√≥n y S√≠ntesis",
            font=('Segoe UI', 14, 'bold'),
            bg='#0f3460',
            fg='#00d4ff'
        )
        translation_title.pack(pady=5)
        
        # Palabra actual formada
        word_frame = tk.Frame(right_frame, bg='#1a1a2e', relief='sunken', bd=2)
        word_frame.pack(pady=10, padx=10, fill='x')
        
        tk.Label(
            word_frame,
            text="Palabra Formada:",
            font=('Segoe UI', 10, 'bold'),
            bg='#1a1a2e',
            fg='#a8dadc'
        ).pack()
        
        self.current_word_label = tk.Label(
            word_frame,
            text="",
            font=('Segoe UI', 14, 'bold'),
            bg='#1a1a2e',
            fg='#00ff88',
            wraplength=280,
            height=2
        )
        self.current_word_label.pack(pady=5)
        
        # Historial de palabras
        history_frame = tk.Frame(right_frame, bg='#1a1a2e', relief='sunken', bd=2)
        history_frame.pack(pady=5, padx=10, fill='both', expand=True)
        
        tk.Label(
            history_frame,
            text="üìù Historial:",
            font=('Segoe UI', 10, 'bold'),
            bg='#1a1a2e',
            fg='#a8dadc'
        ).pack()
        
        # Lista scrollable para historial
        scrollbar = tk.Scrollbar(history_frame)
        scrollbar.pack(side='right', fill='y')
        
        self.history_listbox = tk.Listbox(
            history_frame,
            yscrollcommand=scrollbar.set,
            bg='#16213e',
            fg='#a8dadc',
            font=('Segoe UI', 9),
            selectbackground='#00d4ff'
        )
        self.history_listbox.pack(expand=True, fill='both', padx=5, pady=5)
        scrollbar.config(command=self.history_listbox.yview)
        
        # Estad√≠sticas
        stats_frame = tk.Frame(right_frame, bg='#1a1a2e', relief='sunken', bd=2)
        stats_frame.pack(pady=5, padx=10, fill='x')
        
        tk.Label(
            stats_frame,
            text="üìä Estad√≠sticas:",
            font=('Segoe UI', 10, 'bold'),
            bg='#1a1a2e',
            fg='#a8dadc'
        ).pack()
        
        self.stats_label = tk.Label(
            stats_frame,
            text="Se√±as detectadas: 0\nPalabras formadas: 0",
            font=('Segoe UI', 9),
            bg='#1a1a2e',
            fg='#ffc107',
            justify='left'
        )
        self.stats_label.pack(pady=2)
        
        # Bind para cerrar aplicaci√≥n
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Variables para estad√≠sticas
        self.total_detections = 0
        self.total_words = 0
        self.fps_counter = 0
        self.last_fps_time = time.time()
    
    def detect_with_yolov8(self, frame):
        """Detectar se√±as usando YOLOv8"""
        try:
            if self.model is None:
                return self.detect_basic_signs(frame)
            
            # Ejecutar inferencia
            results = self.model(frame, verbose=False)
            
            detections = []
            for result in results:
                boxes = result.boxes
                if boxes is not None:
                    for box in boxes:
                        # Obtener coordenadas y confianza
                        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                        confidence = box.conf[0].cpu().numpy()
                        class_id = int(box.cls[0].cpu().numpy())
                        
                        # Obtener nombre de la clase
                        class_name = self.model.names[class_id] if hasattr(self.model, 'names') else f"Class_{class_id}"
                        
                        if confidence > 0.5:  # Umbral de confianza
                            detections.append({
                                'class': class_name.upper(),
                                'confidence': confidence,
                                'bbox': (int(x1), int(y1), int(x2), int(y2))
                            })
                            
                            # Dibujar bounding box
                            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                            cv2.putText(frame, f"{class_name}: {confidence:.2f}", 
                                      (int(x1), int(y1)-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            
            return detections, frame
            
        except Exception as e:
            print(f"Error en detecci√≥n YOLOv8: {e}")
            return self.detect_basic_signs(frame)
    
    def detect_basic_signs(self, frame):
        """Sistema b√°sico de detecci√≥n como fallback"""
        # Simulaci√≥n simple de detecci√≥n
        height, width = frame.shape[:2]
        
        # Agregar texto indicando modo b√°sico
        cv2.putText(frame, "Modo Basico - Instale YOLOv8 para mejor precision", 
                   (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)
        
        # Detecci√≥n simulada b√°sica (reemplazar con l√≥gica real)
        import random
        if random.random() > 0.7:  # 30% chance de detecci√≥n
            signs = ['A', 'B', 'C', 'HELLO', 'THANKS']
            detected_sign = random.choice(signs)
            confidence = random.uniform(0.6, 0.9)
            
            return [{
                'class': detected_sign,
                'confidence': confidence,
                'bbox': (50, 50, 200, 200)
            }], frame
        
        return [], frame
    
    def process_detections(self, detections):
        """Procesar las detecciones y formar palabras"""
        if not detections:
            return "Ninguna", 0.0
        
        # Obtener la detecci√≥n con mayor confianza
        best_detection = max(detections, key=lambda x: x['confidence'])
        detected_class = best_detection['class']
        confidence = best_detection['confidence']
        
        # Agregar al buffer para estabilizaci√≥n
        self.prediction_buffer.append((detected_class, confidence))
        
        # Estabilizar predicci√≥n
        if len(self.prediction_buffer) >= 10:
            # Contar frecuencia de las √∫ltimas 10 detecciones
            recent_predictions = list(self.prediction_buffer)[-10:]
            sign_counts = {}
            
            for sign, conf in recent_predictions:
                if sign not in sign_counts:
                    sign_counts[sign] = {'count': 0, 'total_conf': 0}
                sign_counts[sign]['count'] += 1
                sign_counts[sign]['total_conf'] += conf
            
            # Obtener predicci√≥n m√°s estable
            most_frequent = max(sign_counts.items(), key=lambda x: x[1]['count'])
            if most_frequent[1]['count'] >= 6:  # Al menos 6 de 10 detecciones
                stable_sign = most_frequent[0]
                avg_confidence = most_frequent[1]['total_conf'] / most_frequent[1]['count']
                
                # Agregar a palabra actual si es una letra
                if stable_sign != self.last_prediction and len(stable_sign) == 1:
                    self.current_word += stable_sign
                    self.last_prediction = stable_sign
                    self.prediction_count = 0
                elif stable_sign == self.last_prediction:
                    self.prediction_count += 1
                    if self.prediction_count > 20:  # Espacio entre letras
                        if self.current_word and stable_sign != self.current_word[-1]:
                            self.current_word += stable_sign
                        self.prediction_count = 0
                
                return stable_sign, avg_confidence
        
        return detected_class, confidence
    
    def speak_current_word(self):
        """Reproducir la palabra actual con TTS"""
        if self.tts_engine and self.current_word:
            threading.Thread(target=self._speak, args=(self.current_word,), daemon=True).start()
    
    def _speak(self, text):
        """Funci√≥n auxiliar para TTS en hilo separado"""
        try:
            self.tts_engine.say(text)
            self.tts_engine.runAndWait()
        except Exception as e:
            print(f"Error en TTS: {e}")
    
    def clear_history(self):
        """Limpiar historial y palabra actual"""
        if self.current_word:
            self.word_history.append(self.current_word)
            self.history_listbox.insert(tk.END, f"{len(self.word_history)}. {self.current_word}")
            self.total_words += 1
            
        self.current_word = ""
        self.current_word_label.configure(text="")
        self.update_stats()
    
    def update_stats(self):
        """Actualizar estad√≠sticas"""
        stats_text = f"Se√±as detectadas: {self.total_detections}\nPalabras formadas: {self.total_words}"
        self.stats_label.configure(text=stats_text)
    
    def start_camera(self):
        """Iniciar c√°mara y detecci√≥n"""
        try:
            self.cap = cv2.VideoCapture(0)
            if not self.cap.isOpened():
                messagebox.showerror("Error", "No se pudo acceder a la c√°mara")
                return
            
            # Configurar resoluci√≥n para mejor rendimiento
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            self.cap.set(cv2.CAP_PROP_FPS, 30)
            
            self.camera_active = True
            self.start_btn.configure(state='disabled')
            self.stop_btn.configure(state='normal')
            self.status_label.configure(text="üü¢ Sistema Activo", fg='#28a745')
            
            # Iniciar hilo de procesamiento
            self.video_thread = threading.Thread(target=self.process_video_advanced)
            self.video_thread.daemon = True
            self.video_thread.start()
            
        except Exception as e:
            messagebox.showerror("Error", f"Error al iniciar la c√°mara: {str(e)}")
    
    def stop_camera(self):
        """Detener c√°mara"""
        self.camera_active = False
        
        if self.cap:
            self.cap.release()
        
        self.start_btn.configure(state='normal')
        self.stop_btn.configure(state='disabled')
        self.status_label.configure(text="üî¥ Sistema Inactivo", fg='#ffc107')
        self.fps_label.configure(text="FPS: 0")
        self.camera_label.configure(image='', text="C√°mara detenida")
    
    def process_video_advanced(self):
        """Procesamiento avanzado de video con IA"""
        fps_counter = 0
        fps_start_time = time.time()
        
        while self.camera_active:
            try:
                ret, frame = self.cap.read()
                if not ret:
                    break
                
                # Voltear frame para efecto espejo
                frame = cv2.flip(frame, 1)
                
                # Detectar se√±as con IA
                detections, processed_frame = self.detect_with_yolov8(frame)
                
                # Procesar detecciones
                predicted_sign, confidence = self.process_detections(detections)
                
                if predicted_sign != "Ninguna":
                    self.total_detections += 1
                
                # Calcular FPS
                fps_counter += 1
                if time.time() - fps_start_time >= 1.0:
                    fps = fps_counter / (time.time() - fps_start_time)
                    self.root.after(0, lambda: self.fps_label.configure(text=f"FPS: {fps:.1f}"))
                    fps_counter = 0
                    fps_start_time = time.time()
                
                # Actualizar GUI
                self.update_advanced_gui(processed_frame, predicted_sign, confidence)
                
                time.sleep(0.01)  # ~100 FPS m√°ximo
                
            except Exception as e:
                print(f"Error en procesamiento: {str(e)}")
                break
    
    def update_advanced_gui(self, frame, predicted_sign, confidence):
        """Actualizar GUI avanzada"""
        try:
            # Redimensionar y convertir frame
            frame_resized = cv2.resize(frame, (600, 450))
            frame_rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)
            
            # Agregar informaci√≥n overlay
            cv2.putText(frame_rgb, f"IA: {predicted_sign} ({confidence:.1%})", 
                       (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            if self.current_word:
                cv2.putText(frame_rgb, f"Palabra: {self.current_word}", 
                           (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
            
            # Convertir a formato tkinter
            image = Image.fromarray(frame_rgb)
            photo = ImageTk.PhotoImage(image)
            
            # Actualizar imagen
            self.camera_label.configure(image=photo, text="")
            self.camera_label.image = photo
            
            # Actualizar informaci√≥n de detecci√≥n
            sign_text = predicted_sign
            if predicted_sign in self.sign_mapping:
                sign_text += f"\n({self.sign_mapping[predicted_sign]})"
            
            self.detected_sign_label.configure(text=sign_text)
            self.confidence_label.configure(text=f"Confianza: {confidence:.1%}")
            self.detection_count_label.configure(text=f"Detecciones: {self.total_detections}")
            
            # Actualizar palabra actual
            self.current_word_label.configure(text=self.current_word)
            
            # Actualizar estad√≠sticas
            self.update_stats()
            
        except Exception as e:
            print(f"Error actualizando GUI: {str(e)}")
    
    def on_closing(self):
        """Manejar cierre de aplicaci√≥n"""
        self.camera_active = False
        if self.cap:
            self.cap.release()
        cv2.destroyAllWindows()
        self.root.destroy()
    
    def run(self):
        """Ejecutar la aplicaci√≥n"""
        self.root.mainloop()

def install_dependencies():
    """Verificar e instalar dependencias autom√°ticamente"""
    import subprocess
    import sys
    
    required_packages = {
        'ultralytics': 'ultralytics',
        'cv2': 'opencv-python',
        'PIL': 'Pillow',
        'numpy': 'numpy',
        'pyttsx3': 'pyttsx3',
        'requests': 'requests'
    }
    
    missing_packages = []
    
    for module, package in required_packages.items():
        try:
            __import__(module)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("üîß Instalando dependencias faltantes...")
        for package in missing_packages:
            print(f"üì¶ Instalando {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print("‚úÖ Todas las dependencias instaladas")

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üöÄ SISTEMA AVANZADO DE DETECCI√ìN LSP CON IA")
    print("=" * 60)
    print("ü§ñ Tecnolog√≠a: YOLOv8 + Computer Vision")
    print("üéØ Detecci√≥n en tiempo real con IA")
    print("üîä S√≠ntesis de voz integrada")
    print("üí¨ Formaci√≥n autom√°tica de palabras")
    print("=" * 60)
    
    try:
        # Verificar dependencias
        print("üîç Verificando dependencias...")
        install_dependencies()
        
        print("üé¨ Iniciando aplicaci√≥n...")
        app = AdvancedSignLanguageDetector()
        
        print("‚úÖ Sistema listo. ¬°Disfruta detectando se√±as!")
        print("\nüí° CONSEJOS DE USO:")
        print("‚Ä¢ Aseg√∫rate de tener buena iluminaci√≥n")
        print("‚Ä¢ Mant√©n las manos dentro del campo de visi√≥n")
        print("‚Ä¢ Las detecciones se estabilizan autom√°ticamente")
        print("‚Ä¢ Usa 'Reproducir' para escuchar las palabras formadas")
        print("‚Ä¢ El sistema mejora con el modelo YOLOv8 instalado")
        
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Error: Falta instalar una dependencia: {str(e)}")
        print("\nüîß SOLUCI√ìN:")
        print("Ejecuta en tu entorno virtual:")
        print("pip install ultralytics opencv-python pillow numpy pyttsx3 requests")
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        print("\nüÜò Si el problema persiste:")
        print("1. Verifica que tu c√°mara funcione")
        print("2. Aseg√∫rate de tener Python 3.8+")
        print("3. Reinstala las dependencias")

if __name__ == "__main__":
    main()